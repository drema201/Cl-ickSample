# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Deploy to GKE

on:
  push:
    branches:
    - main

env:
  PROJECT_ID: postgretrial
  GAR_LOCATION: us-central1 # # TODO: update region of the Artifact Registry
  GKE_CLUSTER: vpc_native_gke    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update deployment name if changed in deployment.yaml or service.yml
  REPOSITORY: click-repo # TODO: update to Artifact Registry docker repository
  IMAGE: static-site

jobs:
  build:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Configure Workload Identity Federation and generate an access token.
#    - id: 'auth'
#      name: 'Authenticate to Google Cloud'
#      uses: 'google-github-actions/auth@v0'
#      with:
#        workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
#        service_account: 'mygkecli@postgretrial.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
     - id: 'auth'
       uses: 'google-github-actions/auth@v0'
       with:
         credentials_json: '{
                              "type": "service_account",
                              "project_id": "postgretrial",
                              "private_key_id": "04fce4776686b03b5a2cafe8586eb7d9da000851",
                              "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDVmpT82Gu6LKxz\nncfBJuzOJ3Cdi9E9TMWbaV+jysPWcgG5jzYTOvj5HeFSD7sLsCmUcmA3fQJWISOM\nQST53wYtFx95VxLMnMbqKlc3AUVJEMvWLQ6Bq5wfIeKnETYgs+t0JzLY/x6m5UqW\nS9QfdFGnnwyXwN3pMqi8SyYV0LebxrWpoIklWf65V5QE6zpmcKIIRXDUYNAITg+Z\nYRm0blVFju9FAQhhycJtD8mpfq/J3NgCBzWz8fiFsPCllEv8HwXt4rWDAPK0WLbj\n9XCJ9SR7rqwypduHMPp8CQbMa0arhwDVc0J2Fjrt6whPGMMKcveE3K2GjJGQmkJz\nSOefXlaXAgMBAAECggEAUW2qAU+hlaoFHdgWt8/Wc2p+mFieLe+v3ySG9KJOENiK\nRspM83zGP/V/mXBsvjJsT25gtpZ9xwbADe4hoe2+5X6MnY2vmXfkrozwjYP6/TUd\nd6rafl1E2WtqA4VgrIvaJP/ydt2eukHrsqr6lPkbTbqoqss37XfF8m31eViFPikJ\n3z/HEODPhouN2b+ng4jjddhBVsg3EjR2KRF+o0VEoExpDH3fjSdfrWEWO56XG2xk\nKHtJAP6V+LZQXoYwDjvmmm9yHJM0EEwYBEdro+IYV+aKfj6bcMzYWXqB7kYaTpqZ\nFcIW7jSh6zIIbQSXGcKPeXE8zGTYq8EYLzm7awuYJQKBgQD976qetO7H+tWMksOO\nP73EDogMIEBHZZN5MjzEvWQxOG+bLd1MyWKfLKzPx1KQSyus1HKEYMXxexLoff9y\nTNoaTGEaD2DHI/krUi8ktBd81SzWgSVxNWgdVLgwr8j0JLuLdBumBTh7+aq23FK0\nqcb2KqGdBCcVlwKudUGEtKMknQKBgQDXVwA/FLd3U2xeVdp13fPrMQTWSJJGONqV\nm8SIZVoja59uESLCR/OBNORljeo/2AILp7pa1D/hhmfQveVP7Y9LCPjzZ4/fC9cI\n25+oEYuy7qFUSgiuE79vcXu5ohpaJJScXENfLsYgN9gxxmr2EucGNEuHUGlGYNSk\n8Tnz4/FPwwKBgQCNfRCwRVgWjSiXnt7fT5zItOARAZdPMMWu7dL2PCCrXCqzaCa6\nNiuBTT8stn7Gb1vyfJ0iLVmdZ1ntuOawJSoRJSWlg5QE4YJgJPanmMDNiWnmSyc1\noPBWB3JpjkiF4EGvPg55vsbuLPp10OU0TLTTTIWoGzw7x1xzIFpVOuD78QKBgBi3\nMZ4L4Krfdla1f+d7XB2oeKenmLJaoCv/vuTwzRG3rorRiK3H2FkCGxzU1wgQ4Ns5\nmxgFuHdIF+5LfWBZIdM46mn1fvvYvguUOZTuvpwA659jB/AC8Dv4SH0b7+5cuHnh\n1RG9qpvUDQpZfblUnhOGOQ0E27BqOL3dugsWJIJFAoGBANOppNJHY2dMKj3mFfYM\nWMihfYaT9UT8FuvVUcBr0kSePlx8U4cyrfn6ZNxRSglgrTV8y4OxqvX4PdA+kEPj\nSepNw/LHczRMlk6qIeaOgu/PkLeqpkXed+7aDTO7QZRMO+fXyxjU9ttCoV9O6PKO\nvuUYQ555sHJzwwBeevpbwJ1r\n-----END PRIVATE KEY-----\n",
                              "client_email": "mygkecli@postgretrial.iam.gserviceaccount.com",
                              "client_id": "110340629260239012263",
                              "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                              "token_uri": "https://oauth2.googleapis.com/token",
                              "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                              "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/mygkecli%40postgretrial.iam.gserviceaccount.com"
                            }
'

    # Setup gcloud CLI
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication (https://cloud.google.com/artifact-registry/docs/docker/authentication)
    - name: Docker configuration
      run: |-
        gcloud --quiet auth configure-docker $GAR_LOCATION-docker.pkg.dev

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
